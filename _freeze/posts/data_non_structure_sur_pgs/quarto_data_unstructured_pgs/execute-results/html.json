{
  "hash": "d51d50fa07f836b98b5feb8c347bbcf0",
  "result": {
    "markdown": "---\ntitle: \"De la données non structurées en base de données structurées\"\nsubtitle: \"Application aux données géographiques\"\ncategories: ['data science', 'R','python','geojson','postgresql','tidydata']\nauthor:\n    name: GOLLENTZ Quentin\n    url: https://www.linkedin.com/in/quentin-gollentz-697993172/\n    email: quentin.gollentz@daka-team.com\n    affiliations:\n        name: DAKA-TEAM\n        url: https://www.linkedin.com/company/daka%E2%80%A2tec/\n        city: La Madelaine\n        state: France\n        postal-code: 5900\ndate: last-modified\ndate-format: \"DD-MM-YYYY\"\ntitle-block-banner: \"#ECF4FA\"\nbibliography: references.bib\nformat: \n  revealjs:\n    #incremental: true\n    #logo: img/daka-team-white-final.png\n    #footer: \"`emitanaka.org/slides/toronto2022`\"\n    slide-number: true\n    multiplex: true\n    theme: [simple, assets/monash.scss]\n    show-slide-number: all\n    controls: true\n    width: 1280\n    scrollable : true\n    height: 720\n    toc-depth: 10\n    css: [assets/syntax-highlight.css, assets/custom.css, assets/pacman.css, assets/logo.css]\nexecute:\n  echo: true\n---\n\n\n## Concept de Tidy Data [1]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/wadley_wickam_tidy_data.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\n![](img/wadley_wickam_tidy_data.jpg)        \n[@wickam]\n\n## Tidy Data et Messy Data [2]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/standard_data.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\n![](img/standard_data.jpg) [@julia_allison]       \n\n::: info-box\n$80$ à $90$% des données sont non structurées.        \nListe d'exemple de *Messy Data* à partir de [MongoDB](https://www.mongodb.com/unstructured-data)    \n\n<ul>\n\n<li><i class=\"fa-solid fa-bullseye\"></i>`json` dont `geojson`</li>\n<li><i class=\"fa-solid fa-bullseye\"></i>`xml`</li>\n<li><i class=\"fa-solid fa-bullseye\"></i>`image`</li>\n<li><i class=\"fa-solid fa-bullseye\"></i>`texte`</li>\n<li><i class=\"fa-solid fa-bullseye\"></i>`...`</li>\n\n\n</ul>\n:::\n\n## L'avantage du Tidy Data [3]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/pourquoi_tidy_data.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\n![](img/pourquoi_tidy_data.jpg) [@julia_allison]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ntidydata_format <- table1 %>%\n  select(country,year,population) %>%\n  filter(year==2000)\ntidydata_format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country      year population\n  <chr>       <dbl>      <dbl>\n1 Afghanistan  2000   20595360\n2 Brazil       2000  174504898\n3 China        2000 1280428583\n```\n:::\n\n```{.r .cell-code}\n#| code-line-numbers: \"13\"\nnot_tidydata_format <- table4b %>% select(-`1999`) \nnot_tidydata_format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  country         `2000`\n  <chr>            <dbl>\n1 Afghanistan   20595360\n2 Brazil       174504898\n3 China       1280428583\n```\n:::\n\n```{.r .cell-code}\nalso_not_tidydata_format <- table2 %>% filter(year==2000) \nalso_not_tidydata_format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year type            count\n  <chr>       <dbl> <chr>           <dbl>\n1 Afghanistan  2000 cases            2666\n2 Afghanistan  2000 population   20595360\n3 Brazil       2000 cases           80488\n4 Brazil       2000 population  174504898\n5 China        2000 cases          213766\n6 China        2000 population 1280428583\n```\n:::\n:::\n\n\n## Quand un *Messy Data* ne peut se transformer en *Tidy Data* [4]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/process.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\nPrenons l'exemple des [circonscriptions françaises](https://www.data.gouv.fr/fr/datasets/contours-detailles-des-circonscriptions-des-legislatives/).\n\nSi une circonscription se limitait à un point, on pourrait considérer la structure suivante :\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"13\"}\ntribble(\n  ~ ID, ~ code_dpt, ~ nom_dpt, ~ nom_reg, ~ num_circ, ~ lattitude, ~ longitude,\n   \"33004\",\"33\", \"GIRONDE\", \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\"75\",-0.454946,44.953424,\n   \"33004\",\"68\", \"HAUT-RHIN\", \"ALSACE-CHAMPAGNE-ARDENNE-LORRAINE\",\"44\",\t6.981539,48.009421)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 7\n  ID    code_dpt nom_dpt   nom_reg                       num_c~1 latti~2 longi~3\n  <chr> <chr>    <chr>     <chr>                         <chr>     <dbl>   <dbl>\n1 33004 33       GIRONDE   AQUITAINE-LIMOUSIN-POITOU-CH~ 75       -0.455    45.0\n2 33004 68       HAUT-RHIN ALSACE-CHAMPAGNE-ARDENNE-LOR~ 44        6.98     48.0\n# ... with abbreviated variable names 1: num_circ, 2: lattitude, 3: longitude\n```\n:::\n:::\n\n\nMalheureusement c'est plus compliqué que cela.        \n![](img/messy.png)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nPremière solution :        \nMultiplier les **colonnes** :       \n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"13\"}\ntribble(\n  ~ ID, ~ code_dpt, ~ nom_dpt, ~ nom_reg, ~ num_circ, ~ lattitude_point1, ~ lattitude_point1,~ lattitude_point2, ~ lattitude_point2,~ lattitude_point3, ~ lattitude_point3,\n   \"33004\",\"33\", \"GIRONDE\", \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\"75\",-0.454946,44.953424,-0.454946,45.953424,-0.454946,46.953424,\n   \"33004\",\"68\", \"HAUT-RHIN\", \"ALSACE-CHAMPAGNE-ARDENNE-LORRAINE\",\"44\",\t6.981539,48.009421,\t6.981539,49.009421,\t6.981539,50.009421)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 11\n  ID    code_dpt nom_dpt nom_reg num_c~1 latti~2 latti~3 latti~4 latti~5 latti~6\n  <chr> <chr>    <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 33004 33       GIRONDE AQUITA~ 75       -0.455    45.0  -0.455    46.0  -0.455\n2 33004 68       HAUT-R~ ALSACE~ 44        6.98     48.0   6.98     49.0   6.98 \n# ... with 1 more variable: lattitude_point3 <dbl>, and abbreviated variable\n#   names 1: num_circ, 2: lattitude_point1, 3: lattitude_point1,\n#   4: lattitude_point2, 5: lattitude_point2, 6: lattitude_point3\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nDeuxième solution :        \nMultiplier les **lignes** :      \n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"13\"}\ntribble(\n  ~ ID, ~ code_dpt, ~ nom_dpt, ~ nom_reg, ~ num_circ, ~ lattitude, ~ lattitude,\n   \"33004\",\"33\", \"GIRONDE\", \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\"75\",-0.474946,44.953424,\n   \"33004\",\"33\", \"GIRONDE\", \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\"75\",-0.254946,45.953424,\n   \"33004\",\"33\", \"GIRONDE\", \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\"75\",-0.44946,46.953424,\n   \"33004\",\"68\", \"HAUT-RHIN\", \"ALSACE-CHAMPAGNE-ARDENNE-LORRAINE\",\"44\",\t6.981539,49.009421,\n   \"33004\",\"68\", \"HAUT-RHIN\", \"ALSACE-CHAMPAGNE-ARDENNE-LORRAINE\",\"44\",\t6.981539,50.009421,\n   \"33004\",\"68\", \"HAUT-RHIN\", \"ALSACE-CHAMPAGNE-ARDENNE-LORRAINE\",\"44\",\t6.981539,51.009421,\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 7\n  ID    code_dpt nom_dpt   nom_reg                       num_c~1 latti~2 latti~3\n  <chr> <chr>    <chr>     <chr>                         <chr>     <dbl>   <dbl>\n1 33004 33       GIRONDE   AQUITAINE-LIMOUSIN-POITOU-CH~ 75       -0.475    45.0\n2 33004 33       GIRONDE   AQUITAINE-LIMOUSIN-POITOU-CH~ 75       -0.255    46.0\n3 33004 33       GIRONDE   AQUITAINE-LIMOUSIN-POITOU-CH~ 75       -0.449    47.0\n4 33004 68       HAUT-RHIN ALSACE-CHAMPAGNE-ARDENNE-LOR~ 44        6.98     49.0\n5 33004 68       HAUT-RHIN ALSACE-CHAMPAGNE-ARDENNE-LOR~ 44        6.98     50.0\n6 33004 68       HAUT-RHIN ALSACE-CHAMPAGNE-ARDENNE-LOR~ 44        6.98     51.0\n# ... with abbreviated variable names 1: num_circ, 2: lattitude, 3: lattitude\n```\n:::\n:::\n\n:::\n\n::::\n\n## Le type geometry  [5]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/france_metropolitaine.png\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\nConsidérons le type de variable `geometry` dont la valeur est une liste de point.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geojsonR)\nlibrary(geojsonsf)\nlibrary(tidyverse)\nlibrary(geojson)\nlibrary(sf)\nlibrary(sp)\n\nfrance_metropolitaine = geojson_sf(\"data/france-circonscriptions-legislatives-2012.json\") %>%\n  select(num_circ,code_dpt,geometry)%>%\n  rename(circo = num_circ,departementCode =code_dpt ) %>%\n  filter(departementCode!=\"ZD\",\n         departementCode!=\"ZN\",\n         departementCode!=\"ZS\",\n         departementCode!=\"ZX\",\n         departementCode!=\"ZP\",\n         departementCode!=\"ZW\",\n         departementCode!=\"2B\",\n         departementCode!=\"2A\",\n         departementCode!=\"ZA\",\n         departementCode!=\"ZM\",\n         departementCode!=\"ZC\",\n         departementCode!=\"ZB\")\n\nfrance_metropolitaine\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 535 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -5.115104 ymin: 42.33349 xmax: 8.197396 ymax: 51.0894\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   circo departementCode                       geometry\n1      4              33 POLYGON ((-0.454946 44.9534...\n2      1              38 POLYGON ((5.805288 45.2062,...\n3     10              59 POLYGON ((3.058745 50.78071...\n4      7              33 POLYGON ((-0.610649 44.8224...\n5      1              01 POLYGON ((4.888208 46.40298...\n6      2              01 POLYGON ((5.435634 45.82977...\n7      3              01 POLYGON ((5.831226 45.93846...\n8      4              01 POLYGON ((4.888208 46.40298...\n9      5              01 POLYGON ((5.51137 46.26436,...\n10     1              02 POLYGON ((3.320684 49.69935...\n```\n:::\n\n```{.r .cell-code}\nplot(france_metropolitaine)\n```\n\n::: {.cell-output-display}\n![](quarto_data_unstructured_pgs_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Quid de PostgreSQL [6]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/pgs.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\nCi-dessous un script permettant de reproduire la même chose en `SQL` :       \n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE EXTENSION postgis;\nCREATE TABLE assemblee_elective.circonscription(\n  circo VARCHAR,\n  departementCode VARCHAR,\n  geometry geometry);\n \n WITH DATA AS (SELECT '{\n\t\"type\": \"FeatureCollection\",\n\t\"features\": [\n\t\t{\n\t\t\t\"type\": \"Feature\",\n\t\t\t\"properties\": {\n\t\t\t\t\"ID\": \"33004\",\n\t\t\t\t\"code_dpt\": \"33\",\n\t\t\t\t\"nom_dpt\": \"GIRONDE\",\n\t\t\t\t\"nom_reg\": \"AQUITAINE-LIMOUSIN-POITOU-CHARENTES\",\n\t\t\t\t\"num_circ\": \"4\",\n\t\t\t\t\"code_reg\": \"75\"\n\t\t\t},\n\t\t\t\"geometry\": {\n\t\t\t\t\"type\": \"Polygon\",\n\t\t\t\t\"coordinates\": [\n\t\t\t\t\t[\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t-0.454946,\n\t\t\t\t\t\t\t44.953424\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[...\n}'::json AS fc)\n\nINSERT INTO assemblee_elective.circonscription(geometry,departementcode,circo)\n\nSELECT\n\n  ST_AsText(ST_GeomFromGeoJSON(feat->>'geometry')) AS geometry,\n  CAST(REPLACE(CAST(feat->'properties'->'code_dpt' AS varchar),'\"','') AS varchar) AS departementCode,\n  CAST(REPLACE(CAST(feat->'properties'->'num_circ' AS varchar),'\"','') AS varchar) AS circo\n  \nFROM (\n  SELECT json_array_elements(fc->'features') AS feat\n  FROM data \n) AS f;\n```\n:::\n\n\n## Application : Rattachement adresse à une circonscription [7]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/assemble_nationale.png\" height=\"120px\" style=\"vertical-align:middle;\"/>\n\nL'objectif étant à partir d'une adresse de déterminer si cette adresse appartient à la circonscription circonscription en `python` :       \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport geopandas as gpd\nimport os\nimport psycopg2\nfrom sqlalchemy import create_engine\nimport geopy as gp\n\n\ndb = 'bdd_democratie'  \nhost_db = '176.147.16.188'   \ndb_port = '5432'  \ndb_user = \"postgres\"  \ndb_password = 'postgres'\n\n\nconn = psycopg2.connect(\n    host=host_db,\n    database=db,\n    user=db_user,\n    port = db_port,\n    password=db_password)\n\nengine = create_engine(\"postgresql://\"+ db_user + \":\" + db_password + \"@\" + host_db + \":\" + db_port + \"/\" + db)  \n\nadress = \"24 parc de la vallée, 68530 Buhl\"\nlocator = gp.Nominatim(user_agent=\"myGeocoder\")\n\nlocation = locator.geocode(adress)\nlocation.longitude\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7.179495\n```\n:::\n\n```{.python .cell-code}\nlocation.latitude\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n47.9343092\n```\n:::\n\n```{.python .cell-code}\nquery_param = \"ST_SetSRID(ST_MakePoint(\" + str(location.longitude)  + \" , \" + str(location.latitude) + \"),4326)\"\nquery_param\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'ST_SetSRID(ST_MakePoint(7.179495 , 47.9343092),4326)'\n```\n:::\n\n```{.python .cell-code}\nquery_kernel = \"SELECT nom_dpt, geometry as circonscription, \" +  query_param  + \" as point, ST_Contains(geometry,\" + query_param + \") as point_in_circo FROM assemblee_elective.circonscription;\"\nquery_kernel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'SELECT nom_dpt, geometry as circonscription, ST_SetSRID(ST_MakePoint(7.179495 , 47.9343092),4326) as point, ST_Contains(geometry,ST_SetSRID(ST_MakePoint(7.179495 , 47.9343092),4326)) as point_in_circo FROM assemblee_elective.circonscription;'\n```\n:::\n\n```{.python .cell-code}\ncursor = conn.cursor()\ncursor.execute(query_kernel)\n\nprint(\"Voci le résultat ci-dessous : \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVoci le résultat ci-dessous : \n```\n:::\n\n```{.python .cell-code}\nmobile_records = cursor.fetchall()\nmobile_records[292] #Mon adresse appartient bien à la belle circonscription du HAUT-RHIN\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('HAUT-RHIN', '0103000020E6100000010000001900000082FE428F18ED1B40A47213B534014840B1FD648C0F131C40DC2C5E2C0C074840865AD3BCE3341C40D9B5BDDD920A48400C2252D32E561C403CF6B3588A10484028B517D1763C1C40BF9CD9AED01148403F912749D76C1C40C328081EDF184840ECA694D74A981C40570740DCD5214840B98AC56F0ACB1C408194D8B5BD274840B2DAFCBFEA181D40B265F9BA0C274840AF5C6F9BA9401D402975C93846204840309B00C3F2671D40A81DFE9AAC1F48407A39ECBE63E81D4052431B800D1A48406F2A52616CE11D40B2D5E59480144840DBDE6E490EC81D405A492BBEA11648402461DF4E22921D402C4487C091164840AD18AE0E80781D40C51C041DAD104840E355D636C5531D40C6C210397D0F4840998235CEA6431D40A3CA30EE06094840D177B7B244671D40DB166536C80648401D1D5723BB621D401230BABC39024840AAB706B64A501D40952C27A1F4F74740D5EAABAB02C51C407B4ACE893DF247409D6340F67A471C401BD5E940D6F34740CF68AB92C8EE1B404AEB6F09C0FD474082FE428F18ED1B40A47213B534014840', '0101000020E61000009D2E8B89CDB71C400C2DA17197F74740', True)\n```\n:::\n\n```{.python .cell-code}\nmobile_records[132] # Mon adresse n'appartient pas à la moins belle circonscription du BAS-RHIN\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('BAS-RHIN', '0103000020E6100000010000000A0000008A8F4FC8CEEB1E40B2F2CB608C46484029EACC3D24EC1E4009FD4CBD6E47484026FBE769C0F01E409DD9AED00749484092B442DA18271F40FB668163A34B48404CC11A67D3311F40FB20CB82894B484085ED27637C381F404DBB9866BA414840F5B9DA8AFD151F40912BF52C083F4840DEE522BE13D31E40EFA83121E64048403BE5D18DB0C81E401EFB592C454448408A8F4FC8CEEB1E40B2F2CB608C464840', '0101000020E61000009D2E8B89CDB71C400C2DA17197F74740', False)\n```\n:::\n:::\n\n## Citations et discussion [8]{.circle} <i class=\"fa-brands fa-r-project\" style=\"height:120px;vertical-align:middle;\"></i> <img src=\"img/hansi.jpg\" height=\"120px\" style=\"vertical-align:middle;\"/>\n",
    "supporting": [
      "quarto_data_unstructured_pgs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}