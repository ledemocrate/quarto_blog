{
  "hash": "0b96c00f369e4a1b4c2044d173983c27",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidytuesday 10-09-2025 : Données des conférences useR\"\ncategories: ['Nettoyage des données','Analyse des données']\nauthor:\n    name: GOLLENTZ Quentin\n    url: https://www.linkedin.com/in/quentin-gollentz-697993172/\n    email: quentin.gollentz@daka-team.com\ndate: last-modified\ndate-format: \"DD-MM-YYYY\"\ndescription: \"Traitement des données du 10-09-2025\"\ntitle-block-banner: \"#ECF4FA\"\nformat: \n  html:\n    code-fold: true\n    embed-resources: true\n    smooth-scroll: true\n    theme: cosmo\n    fontcolor: black\n    toc: true\n    toc-location: left\n    toc-title: Summary\n    toc-depth: 3\n    html-math-method: katex\n    self_contained: no\ncss: css/styles.css\nbibliography: references.bib\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n# Chargement des librairies\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Chargement des librairies\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(ggraph)\nlibrary(igraph)\n\n\n# Chargement des données\n\ntuesdata <- tt_load('2025-09-09')\n\n# On observe des colonnes de type json bien qu'il soit de type string\n\n\n# COLONNE 1 : VISA_REQUIRED\n# Fonction pour décomposer la colonne JSON\ndata_visa_required <- tuesdata$country_lists %>%\n  rename(from = country ) %>%\n  mutate(\n    # Convertir la chaîne JSON en liste R\n    data_visa_required = lapply(visa_required, fromJSON)\n  )  %>%\n  # Décomposer la liste en lignes\n  unnest(data_visa_required) %>%\n  select(from,data_visa_required)\n\ndata_visa_required <- unnest(data_visa_required) %>%\n  select(from,name) %>%\n  rename(to = name)\n\nnetwork <- graph_from_data_frame(d = data_visa_required, directed = F)\nplot(network)\n```\n\n::: {.cell-output-display}\n![](tidytuesday_10092025_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# COLONNE 2 : VISA_ONLINE\n# Fonction pour décomposer la colonne JSON\ndata_visa_online <- tuesdata$country_lists %>%\n  rename(code_origine = code ) %>%\n  mutate(\n    # Convertir la chaîne JSON en liste R\n    data_visa_online = lapply(visa_online, fromJSON)\n  )  %>%\n  # Décomposer la liste en lignes\n  unnest(data_visa_online) %>%\n  select(code_origine,country,data_visa_online)\n\ndata_visa_online <- unnest(data_visa_online)\n\n# COLONNE 3 : VISA_ON_ARRIVAL\n# Fonction pour décomposer la colonne JSON\ndata_visa_on_arrival <- tuesdata$country_lists %>%\n  rename(code_origine = code ) %>%\n  mutate(\n    # Convertir la chaîne JSON en liste R\n    data_visa_on_arrival = lapply(visa_on_arrival, fromJSON)\n  )  %>%\n  # Décomposer la liste en lignes\n  unnest(data_visa_on_arrival) %>%\n  select(code_origine,country,data_visa_on_arrival)\n\ndata_visa_on_arrival <- unnest(data_visa_on_arrival)\n\n# COLONNE 4 : VISA_FREE_ACCESS\n# Fonction pour décomposer la colonne JSON\ndata_visa_free_access <- tuesdata$country_lists %>%\n  rename(code_origine = code ) %>%\n  mutate(\n    # Convertir la chaîne JSON en liste R\n    data_visa_free_access = lapply(visa_free_access, fromJSON)\n  )  %>%\n  # Décomposer la liste en lignes\n  unnest(data_visa_free_access) %>%\n  select(code_origine,country,data_visa_free_access)\n\ndata_visa_free_access <- unnest(data_visa_free_access)\n\n# COLONNE 5 : ECTRONIC_TRAVEL_AUTHORISATION\n# Fonction pour décomposer la colonne JSON\ndata_electronic_travel_authorization <- tuesdata$country_lists %>%\n  rename(code_origine = code ) %>%\n  mutate(\n    # Convertir la chaîne JSON en liste R\n    data_electronic_travel_authorization = lapply(electronic_travel_authorisation, fromJSON)\n  )  %>%\n  # Décomposer la liste en lignes\n  unnest(data_electronic_travel_authorization) %>%\n  select(code_origine,country,data_electronic_travel_authorization)\n\ndata_electronic_travel_authorization <- unnest(data_electronic_travel_authorization)\n```\n:::\n",
    "supporting": [
      "tidytuesday_10092025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}