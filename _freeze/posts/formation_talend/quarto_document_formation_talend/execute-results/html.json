{
  "hash": "b9901d965f4ddb72673f7f23367b448f",
  "result": {
    "markdown": "---\ntitle: \"Formation DATA (TRAVAIL EN COURS)\"\nsubtitle: \"Utilisation d'un ETL : Talend\"\ncategories: ['talend', 'data science']\nauthor:\n    name: GOLLENTZ Quentin\n    url: https://www.linkedin.com/in/quentin-gollentz-697993172/\n    email: quentin.gollentz@daka-team.com\n    affiliations:\n        name: DAKA-TEAM\n        url: https://www.linkedin.com/company/daka%E2%80%A2tec/\n        city: Lille\n        state: France\n        postal-code: 5900\ndate: last-modified\ndate-format: \"DD-MM-YYYY\"\ndescription: \"Application sur l'Open Data de l'Assemblée Nationale\"\ntitle-block-banner: \"#ECF4FA\"\nformat: \n  html:\n    code-fold: true\n    embed-resources: true\n    smooth-scroll: true\n    theme: cosmo\n    fontcolor: black\n    toc: true\n    toc-location: left\n    toc-title: Summary\n    toc-depth: 3\n    html-math-method: katex\n    self_contained: no\ncss: css/styles.css\nbibliography: references.bib\n---\n\n\n# 0. Introduction et prérequis\n\nDans la suite du document, nous proposons des exercices qui sont liés les uns des autres.\\\nIl est donc nécessaire de suivre dans l'ordre le document car certains exercices sont conditionnés aux précédents.\\\nNous proposons le traitement de données issus de l'Open Data de l'Assemblée Nationale.\n\nPour la réalisation des exercices, il sera nécessaire d'avoir :\n\n-   Talend en version 7.3\n-   Notepad++\n-   Dbeaver\n-   Postman\n-   PostgreSQL\n-   Connexion internet\n-   Une compréhension basique de l'anglais technique\n-   Une compréhension basique de la science des données\n\n# 1. Prise en main\n\n## 1.1 Présentation\n\n**L'ETL est un acronyme pour EXTRACT TRANSFORM AND LOAD.**\n\nC'est un concept signifiant le chargement de données d'un point A vers un point B ou les données de A sont éventuellement transformé afin d'être chargés dans B.\\\nUn logiciel ETL (Extract, Transform, Load) permet d'extraire des données brutes depuis une base de données, pour ensuite les restructurer, et enfin les charger.\\\nLes premiers ETL ont fait leur apparition dans les années 1970, mais ont beaucoup évolué pour répondre aux nouveaux besoins liés à l'essor du Cloud, des [SaaS (logiciels en tant que service)](https://www.lebigdata.fr/definition-saas) et du Big Data.\\\nDésormais, les ETL doivent permettre l'ingestion en temps réel, l'enrichissement de données, la prise en charge de milliards de transactions. Ils prennent aussi en charge les données structurées ou non structurées en provenance de sources sur site ou sur le Cloud.\\\nDe même, ces plateformes doivent désormais être scalables, flexibles, résistantes aux pannes, et sécurisées.\n\n**Talend est donc un logiciel ETL de manière simplifier afin que le développeur ne s'occupe que de la partie règle de métier.**\n\n## 1.2 Installation de l'outil\n\n#### TALEND\n\n-   **Etape 1** : Se rendre le dossier Google Drive suivant :\n    -   [`google_drive`](https://drive.google.com/drive/folders/1B_jTobHpSz_h2LFBbwAunaaA0G_X3jQc)\n-   **Etape 2** : Télécharger l'archive *ESB_731.7z*\n-   **Etape 3** : Extraire l'archive téléchargé précédemment à la racine du disque C:/\n\nÀ la fin de ces étapes, vous devriez obtenir le dossier suivant :\n\n![](img/resultat_installation_talend.png)\n\nÉgalement les sous-dossiers suivants :\n\n![](img/resultat_installation_talend_subfolder.png)\n\n#### JAVA\n\nTalend peut être vu comme un générateur de code Java, ainsi il est donc nécessaire de disposer d'une version de machine java adapté à la version de Talend utilisé.\n\n-   **Etape 1** : Se rendre le dossier Google Drive suivant :\n    -   [`google_drive`](https://drive.google.com/drive/folders/1B_jTobHpSz_h2LFBbwAunaaA0G_X3jQc)\n-   **Etape 2** : Télécharger l'archive *jdk-20.zip*\n-   **Etape 3** : Extraire l'archive téléchargé précédemment à la racine du disque C:/\n-   **Etape 4** : Lancer une invite de commande (Rappel : cmd dans une fenêtre)\n-   **Etape 5** : Lancer les commandes suivantes :\n    -   `set PATH=C:\\jdk-20\\bin;%PATH%`\n    -   `java -version`\n    -   `where java`\n\nÀ la fin de ces étapes, vous devriez obtenir le résultat suivant :\n\n![](img/resultat_installation_java.png)\n\n#### NOTEPAD++\n\n-   **Etape 1** : Se rendre le dossier Google Drive suivant :\n    -   [`google_drive`](https://drive.google.com/drive/folders/1B_jTobHpSz_h2LFBbwAunaaA0G_X3jQc)\n-   **Etape 2** : Télécharger l'archive *Notepad++.7z*\n-   **Etape 3** : Extraire l'archive téléchargé précédemment à la racine du disque C:/\n\nÀ la fin de ces étapes, vous devriez obtenir le résultat suivant :\n\n![](img/resultat_installation_notepad.png)\n\nÉgalement les sous-dossiers suivants :\n\n![](img/resultat_installation_notepad_subfolder.png)\n\n#### DBEAVER\n\n-   **Etape 1** : Se rendre le dossier Google Drive suivant :\n    -   [`google_drive`](https://drive.google.com/drive/folders/1B_jTobHpSz_h2LFBbwAunaaA0G_X3jQc)\n-   **Etape 2** : Télécharger l'archive *Dbeaver.7z*\n-   **Etape 3** : Extraire l'archive téléchargé précédemment à la racine du disque C:/\n\nÀ la fin de ces étapes, vous devriez obtenir le résultat suivant :\n\n![](img/resultat_installation_dbeaver.png)\n\nÉgalement les sous-dossiers suivants :\n\n![](img/resultat_installation_dbeaver_subfolder.png)\n\n#### POSTGRESQL\n\nExpliquer les procédures serait un peu compliqué et redondant par rapport à la documentation qu'on peut trouver sur le web.\\\nVous pouvez suivre la procédure ici :\\\n[`postgresql`](https://www.postgresqltutorial.com/postgresql-getting-started/install-postgresql)\n\nVous pouvez également regarder la vidéo ci-dessous :\n\n\n```{=html}\n<video \n  src=\"video/postgresql.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n[Source : \\@waytolearn](https://www.youtube.com/watch?v=H_TFWZo-I5w)\n\n## 1.3 Création d'un WORKSPACE\n\n[Les projet Talend sont stockés dans un espace de travail (workspace)](https://business-intelligence.developpez.com/faq/talend/?page=I).\n\nChaque projet Talend contient un ensemble de Jobs (traduit sous forme de \"classe\"), ces jobs Talend sont stockés dans un projet Talend.\n\nCi-dessous, vous verrez l'arborescence d'un projet Talend :\n\n-   workspace\n    -   projet1\n        -   businessProcess (les Business Models)\n        -   code (les Routines)\n        -   configuration (les fichiers de configuration)\n        -   context (les contextes)\n        -   documentations (les documentations créés dans les jobs)\n        -   images (les images des tMap par exemple)\n        -   joblets (les joblets pour les version TIS)\n        -   metadata (les metadata)\n        -   process (les jobs)\n        -   sqlPatterns (les patterns sql)\n        -   temp (les fichiers temporaires)\n    -   projet2\n        -   businessProcess\n        -   code\n        -   ...\n\nAvant de créer son premier WORKSPACE, il convient de lancer Talend Studio.\\\nEn supposant que les étapes précédentes ont été respectées, il convient de :\\\n\n-   Se rendre dans ce chemin : `C:\\ESB_731\\Studio`\n-   Faire un double clic gauche sur l'exécutable `TOS_ESB-win-x86_64.exe` afin de démarrer Talend Studio.\n\nRemarque : Il est recommandé de créer un Raccourci vers exécutable dans son Bureau afin d'éviter une navigation inutile. (Rappel : CTRL+C sur exécutable puis CTRL+V sur le Bureau)\n\nÀ l'exécution vous devriez avoir la fenêtre suivante qui s'ouvre :\n\n![](img/demarrage_talend.png) Par défaut, le WORKSPACE sera situé dans le chemin suivant :\n\n-   `C:\\ESB_731\\Studio\\workspace`\n\nPour pouvoir changer d'endroit, il convient de :\n\n-   Cliquer sur : Gérer les connexions\n-   Dans la partie Espace de travail : Mettre le chemin souhaité\n\n![](img/set_workspace_path.png)\n\n## 1.4 Présentation du Talend Studio\n\nRappel commande utile :\n\n-   CTRL + A : Tout sélectionner\n-   CTRL + C : Copier\n-   CTRL + V : Coller\n-   CTRL + Z : Revenir à l'état précédent une action\n-   CTRL + Y : Revenir à l'état succèdent une action\n-   CTRL + S : Sauvegarder\n\n#### BARRE PRINCIPALE\n\n![](img/barre_principale.png)\n\n-   FICHIER : Permet de changer de WORKSPACE et de modifier les propriétés du projet (Non utile)\n-   EDITER : Revenir en arrière, Copier, Coller, ect... (Non utile)\n-   FENÊTRE :\n    -   Modifier les éléments visuelles du Studio (Plutôt utile)\n    -   Dans Préférences l'ensemble des paramètres pour les jobs du projet (Trop vaste pour être traité dans exhaustivité) (Très utile)\n\n#### QUADRANT NORD OUEST\n\n![](img/quadrant_nord_ouest.png)\n\n-   BUSINESS MODELS : (Aucune idée de l'utilité ou non)\\\n-   JOBS : L'endroit où l'on peut retrouver les différents JOB, par JOB on entend un traitement de données. Dans d'autres langage de programmation on parle de script.\\\n-   ROUTES : L'équivalent d'un Job mais le mode d'exécution n'est pas le même, un job sera lancé une fois tandis qu'une ROUTE est un service qui s'exécute en permanence\\\n-   SERVICES : On appelle cela communément une API permet de faire le lien avec d'autres application par exemple une BDD\\\n-   CONTEXTE : L'endroit om l'on peut retrouver les variables de contexte qui sont disponible à l'exécution du JOB que l'on oppose aux variables globales qui sont disponibles dans le Job\\\n-   RESSOURCE : (Aucune idée de l'utilité ou non)\\\n-   CODE : Permet de faire du code Java que l'on pourra réutiliser\\\n-   MODEL SQL : (Aucune idée de l'utilité ou non)\\\n-   METADONNE : L'endroit où l'on stocke les métadonnées des diverses sources de données possible :\n    -   BDD\\\n    -   Fichier Délimité\\\n    -   Fichier JSON\\\n    -   Ect ....\n\n#### QUADRANT NORD EST\n\n![](img/quadrant_nord_est.png)\n\nL'endroit où nous allons créer les jobs qui prennent généralement des sources de données effectue des transformations en vue de les mettre dans une autre ou la même source de données.\\\nNous verrons cela plus en détail dans les parties suivantes.\n\n#### QUADRANT SUD OUEST\n\n![](img/quadrant_sud_ouest.png)\n\n-   APERCU DU CODE : (Aucune idée de l'utilité ou non)\n-   OUTLINE : Ne prend sens que dans le cas où un job est ouvert. On retrouve ici l'ensemble des composants utilisées dans le job ouvert et les variables globales que ces composants génèrent.\\\n    Ces variables peuvent être définis avant l'exécution du composant ou après.\n\n#### QUADRANT SUD EST\n\n-   COMPOSANT : Ne prend sens que dans le cas où un job est ouvert et qu'on à cliqué sur un composant. Dans cette fenêtre, nous allons paramétrer le composant afin que celui fonctionne selon nos besoins\n-   CONTEXT : Permet de visualiser et de gérer l'ensemble des variables de contexte utilisés dans le job\n-   EXECUTER LE JOB : Ne prend sens que dans le cas où un job est ouvert, il permet d'exécuter le traitement et d'afficher ce qui arrive dans la console. Une exécution en mode DEBUG est possible qui permet d'afficher l'ensemble des variables utilisées par le programme et leurs valeurs à l'instant T, il est également dans ce mode de faire une pause dans le traitement.\n\n![](img/quadrant_sud_est.png)\n\n## 1.5 Création d'un job\n\nNous allons dans cette partie créé notre premier job. Celui-ci servira d'exemple en terme de bonne pratique quand au nommage et à la description de celui-ci. Mais avant cela, nous allons créer un nouveau workspace qui sera utilisé dans la suite des exercices :\n\n-   **Etape 0** : Créer un dossier : C:/workspace_talend\n\n-   **Etape 0 bis** : Démarrer Talend\n\n-   **Etape 1** : Cliquer sur Gérer les connexions et choisir le dossier créer en étape 0\n\n-   **Etape 1 bis** : Attendre que Talend redémarre\n\n-   **Etape 2** : Créer un projet nommé : OPENDATA_ASSEMBLEE_NATIONALE\n\n-   **Etape 3** : Créer un job avec :\n\n    -   pour titre : DL_DATA_DEPUTE\n    -   pour objectif : Téléchargement d'un fichier de type csv contenant les informations des députés et dans la description\n    -   pour description le bloc suivant en remplaçant les {} par vos informations :\n\n    \\##########\\\n    DATE DE CREATION : {dd/MM/yyyy}\\\n    DATE DE MODIFICATION :\\\n    VERSION : 0.1\\\n    AUTEUR : {nom_prenom}\\\n    DESCRIPTION : CREATION DU JOB\\\n    \\##########\n\n\n```{=html}\n<video \n   src=\"video/init_workspace_creation_job.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n# 2. Création de traitement\n\n## 2.1 Fichier plat -- Traitement des députés\n\n### TELECHARGEMENT DU FICHIER\n\nL'objectif ici est de télécharger le fichier source que nous allons utilisé par la suite. Il convient de bien organiser son projet, ainsi nous mettrons les fichiers de type SOURCE dans un dossier :\n\n-   C:/workspace_talend/source/\n\nDossier que l'on va opposé à un dossier dns lequel nous allons mettre des fichiers généré par le logiciell appellé cible :\n\n-   C:/workspace_talend/cible/\n\nPour cela, nous allons utlisé le composant **tFileFetch** qui peut être trouvé soit dans la pallette à droite, soit en tapant directement **tFileFetch** n'importe où dans le quadrant nord-est.\n\nUn [composant](https://www.axysweb.com/le-lexique-pour-comprendre-et-utiliser-le-studio-talend/) est un sous-ensemble d'un job qui effectue une opération définie. Par exemple : lire un fichier, filtrer des données ou encore extraire des données.\n\nUn composant est composé d'un extrait de code Java généré automatiquement. Le but des composants est de gagner du temps en évitant le codage manuel pour effectuer les opérations de traitement de données courantes.\n\nTalend propose une multitude de composants prêts à l'emploi regroupés un répertoire. Il est possible de développer des composants sur-mesure si Talend ne propose aucun composant répondant à votre besoin.\n\nURL : \"https://www.data.gouv.fr/fr/datasets/r/092bd7bb-1543-405b-b53c-932ebb49bb8e\"\\\nMETHODE : GET (Nous allons voir cette notion plus en loin dans le document) - Décocher POST\\\nNOM_FICHIER : \"depute.csv\"\\\nCIBLE : \"C:/workspace_talend/source/depute/\"\n\n\n```{=html}\n<video \n  src=\"video/first_job_fetch_file.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n#### EXECUTION DU JOB\n\nPour pouvoir exécuter un job, il convient de se mettre dans l'onglet \"EXECUTER\" dans le QUADRANT SUD EST.\\\nEnsuite il faut cliquer EXECUTER et observé qu'aucune erreur de compilation n'est généré.\\\nLes erreurs de compilation sont la conséquence d'un code mal écrit.\n\nIl convient ensuite de s'assurer du bon fonctionnement du job. Ici nous souhaitons simplement télécharger un fichier csv dans un dossier, il convient donc de s'assurer que ce fichier est bien présent dans le dossier spécifié.\n\n\n```{=html}\n<video \n  src=\"video/launch_first_job.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n### LECTURE DU FICHIER\n\nNous allons dans cette partie créé un second job qui va lire le fichier télécharger par le premier.\n\n-   pour titre : READ_DATA_DEPUTE\n-   pour objectif : Lecture d'un fichier de type csv contenant les informations des députés et dans la description\n-   pour description le bloc suivant en remplaçant les {} par vos informations :\\\n    \\##########\\\n    DATE DE CREATION : {dd/MM/yyyy}\\\n    DATE DE MODIFICATION :\\\n    VERSION : 0.1\\\n    AUTEUR : {nom_prenom}\\\n    DESCRIPTION : CREATION DU JOB\\\n    \\##########\n\nLa première chose à faire est de déterminer la structure du fichier. Pour cela nous allons l'ouvrir avec Notepad :\n\n\n```{=html}\n<video \n  src=\"video/open_file_notepad.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\nNous constatons :\n\n-   une première ligne d'entête qui donne le nom des différents champs.\n-   les champs sont séparés par des \",\"\n-   Nom du fichier : depute.csv\n-   Dossier : C:/workspace_talend/source/depute/\n-   les champs sont les suivants :\n\n| Nom du champ                 | Type   | Nullable |\n|------------------------------|:-------|---------:|\n| id                           | STRING |      YES |\n| legislature                  | STRING |      YES |\n| civ                          | STRING |      YES |\n| nom                          | STRING |      YES |\n| prenom                       | STRING |      YES |\n| villeNaissance               | STRING |      YES |\n| naissance                    | STRING |      YES |\n| age                          | STRING |      YES |\n| groupe                       | STRING |      YES |\n| groupeAbrev                  | STRING |      YES |\n| departementNom               | STRING |      YES |\n| departementCode              | STRING |      YES |\n| datePriseFonction            | STRING |      YES |\n| mail                         | STRING |      YES |\n| twitter                      | STRING |      YES |\n| facebook                     | STRING |      YES |\n| website                      | STRING |      YES |\n| nombreMandats                | STRING |      YES |\n| experienceDepute             | STRING |      YES |\n| scoreParticipation           | STRING |      YES |\n| scoreParticipationSpecialite | STRING |      YES |\n| scoreLoyaute                 | STRING |      YES |\n| scoreMajorite                | STRING |      YES |\n| dateMaj                      | STRING |      YES |\n\n: Structure du fichier\n\nNous avons dans un premier temps spécifié le type STRING pour l'ensemble des champs afin d'être sûr de bien pouvoir lire le fichier.\\\nEn effet, le type STRING est le plus complet dans le sens où touts les types peuvent être convertis en STRING\n\nNous connaissons donc le format du fichier, il convient maintenant de spécifier le schéma à Talend afin qu'il sache comment lire le fichier.\n\nDeux possibilités : - Le faire à la main\\\n- AVANTAGE : CONTROLE - DESAVANTAGE : LENT - Laisser TALEND le faire\\\n- AVANTAGE : CONTROLE - DESAVANTAGE : LENT\n\nLa structure du fichier peut être définis selon deux possibilité de façon unitaire pour le fichier en question ou en métadonné qui pourra être réutilisé par la suite.\n\n\n```{=html}\n<video \n  src=\"video/set_schema_a_la_mano.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n### TRANSFORMATION\n\nNous allons maintenant transformé les données d'entrée avant de les imprimer. Nous allons créer un nouveau champ que l'on va appelé : - intitule : qui va concaténer le titre (Monsieur ou Madame) le nom et le prénom du député en question.\n\n\n```{=html}\n<video \n  src=\"video/transform_data_tmap.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n### JOINTURE\n\nAvant de voir une jointure, il convient de télécharger un deuxième fichier. Il convient de mettre à jour le job DL_DATA_DEPUTE en spécifiant une mineur 0.2 et ajoutant à la description le bloc suivant :\\\n\\##########\\\nDATE DE CREATION : REPRENDRE LA DATE DE CREATION DU BLOC PR2CEDENT\\\nDATE DE MODIFICATION : {dd/MM/yyyy}\\\nVERSION : 0.2\\\nAUTEUR : {nom_prenom}\\\nDESCRIPTION : TELECHARGEMENT D'UN FICHIER SUPLLEMENTAIRE\\\n\\##########\n\nCes divers bloc sont là pour tracer les diverses évolutions que peut rencontrer un flux. Maitenant il convient d'apporter la modification suivante : - Dupliquer le composant tFileFetch précedemment avec pour paramètrage : URL : \"https://www.data.gouv.fr/fr/datasets/r/092bd7bb-1543-405b-b53c-932ebb49bb8e\" METHODE : GET (Nous allons voir cette notion plus en loin dans le document) - Décocher POST NOM_FICHIER : \"depute.csv\" CIBLE : \"C:/workspace_talend/source/depute/\"\n\n\n```{=html}\n<video \n  src=\"video/modification_job_dl_log_opt.mp4\" \n  width=\"1000\" \n  height=\"500\">\n</video>\n```\n\n(METTRE A JOUR JOB DL_DATA_DEPUTE avec nouveau fichier https://data.assemblee-nationale.fr/acteurs/deputes-en-exercice)\n\n## 2.2 Fichier JSON -- Traitement des données de votes\n\n# FAIRE LE LIEN AVEC LE FICHIER JSON DES VOTES\n\n# FAIRE LE LIEN AVEC LE FICHIER GEOJSON\n\n## 2.3 Base de données -- Création d'une BDD et alimentation à partir des flux précédents\n\n# ECRITURE EN BDD\n\n## 2.4 Création d'un API\\*\n\n# UTILISATION BDD POUR CRER UNE API QUI EN FONCTION DUNE ADRESSE DONNE LE DEPUTE\n\n# 3. Norme et bonne pratique\n\n## 3.1 Variable et groupe de contexte\n\n## 3.2 Log\n\n## 3.3 Règle de nommage et esthétique\n\n## 3.4 Création d'un API\n\n# 4. Déploiement et dévollepement informatique\n\n## 4.1 Construction du job\n\n## 4.2 Déploiement et Unix\n\n## 4.3 Developement informatique\n\n# ANNEXE\n\n## Running Code\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nYou can do math :\\\n$Y_{hat}=\\epsilon +\\beta = \\gamma$\n\nYou can add options to executable code like this The `echo: false` option disables the printing of code (only output is displayed).\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nYou can add options to executable code like this Blah Blah [see @QGOLLENTZ, pp. 33-35] \nYou can add options to executable code like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-997cf5d5d748ba26bb83\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-997cf5d5d748ba26bb83\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.852,174.768,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"The birthplace of R\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.852,-36.852],\"lng\":[174.768,174.768]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\r\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\r\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\r\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\r\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/leaflet-binding-2.1.1/leaflet.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}